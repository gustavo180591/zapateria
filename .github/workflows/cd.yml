name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main, production]
    types: [completed]

defaults:
  run:
    working-directory: ./

jobs:
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    needs: deploy-approval
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push frontend
      working-directory: ./frontend
      run: |
        docker build -t ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} .
        docker push ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
    
    - name: Build and push backend
      working-directory: ./backend
      run: |
        docker build -t ghcr.io/${{ github.repository }}/backend:${{ github.sha }} .
        docker push ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
    
    - name: Deploy to Kubernetes (Staging)
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_SSH_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          kubectl config use-context ${{ secrets.STAGING_KUBE_CONTEXT }}
          kubectl set image deployment/frontend frontend=ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} --namespace=staging
          kubectl set image deployment/backend backend=ghcr.io/${{ github.repository }}/backend:${{ github.sha }} --namespace=staging
          kubectl rollout status deployment/frontend --namespace=staging
          kubectl rollout status deployment/backend --namespace=staging

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Tag and push frontend as production
      run: |
        docker pull ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
        docker tag ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} ghcr.io/${{ github.repository }}/frontend:production
        docker push ghcr.io/${{ github.repository }}/frontend:production
    
    - name: Tag and push backend as production
      run: |
        docker pull ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        docker tag ghcr.io/${{ github.repository }}/backend:${{ github.sha }} ghcr.io/${{ github.repository }}/backend:production
        docker push ghcr.io/${{ github.repository }}/backend:production
    
    - name: Deploy to Kubernetes (Production)
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_SSH_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          kubectl config use-context ${{ secrets.PROD_KUBE_CONTEXT }}
          kubectl set image deployment/frontend frontend=ghcr.io/${{ github.repository }}/frontend:production --namespace=production
          kubectl set image deployment/backend backend=ghcr.io/${{ github.repository }}/backend:production --namespace=production
          kubectl rollout status deployment/frontend --namespace=production
          kubectl rollout status deployment/backend --namespace=production
    
    - name: Notify deployment status
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: "#36a64f"
        SLACK_TITLE: "ðŸš€ Production Deployment Successful"
        SLACK_MESSAGE: "New version of Zapateria has been deployed to production!"
        SLACK_USERNAME: GitHub Actions
        MSG_MINIMAL: true

  deploy-approval:
    name: Wait for Approval
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    needs: [test-and-lint, build]
    steps:
    - name: Create deployment approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.token }}
        approvers: ${{ env.APPROVERS || github.actor }}
        minimum-approvals: 1
