name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    # Run frontend unit tests
    - name: Frontend Unit Tests
      working-directory: ./frontend
      run: |
        npm ci
        npm run test:unit -- --coverage
      env:
        NODE_ENV: test
    
    # Run backend unit tests
    - name: Backend Unit Tests
      working-directory: ./backend
      run: |
        npm ci
        npm run test:unit -- --coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test
        DB_USER: test
        DB_PASSWORD: test
    
    # Run mobile app unit tests
    - name: Mobile App Unit Tests
      working-directory: ./mobile-app
      run: |
        npm ci
        npm run test:unit -- --coverage
      env:
        NODE_ENV: test
  
  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    # Start backend server for API tests
    - name: Start Backend Server
      working-directory: ./backend
      run: |
        npm ci
        npm run db:migrate
        npm run start:test &
        echo "$!" > server.pid
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test
        DB_USER: test
        DB_PASSWORD: test
    
    # Run API integration tests
    - name: API Integration Tests
      working-directory: ./backend
      run: |
        npm run test:integration
      env:
        NODE_ENV: test
        API_URL: http://localhost:3000
    
    # Stop backend server
    - name: Stop Backend Server
      if: always()
      run: |
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid)
        fi
  
  e2e-tests:
    name: E2E Tests
    needs: integration-tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    # Start backend server for E2E tests
    - name: Start Backend Server
      working-directory: ./backend
      run: |
        npm ci
        npm run db:migrate
        npm run start:test &
        echo "$!" > server.pid
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test
        DB_USER: test
        DB_PASSWORD: test
    
    # Start frontend for E2E tests
    - name: Start Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        npm run start:test &
        echo "$!" > server.pid
      env:
        NODE_ENV: test
        REACT_APP_API_URL: http://localhost:3000
    
    # Run E2E tests
    - name: Run E2E Tests
      working-directory: ./e2e
      run: |
        npm ci
        npm run test:e2e
      env:
        TEST_URL: http://localhost:3001
    
    # Cleanup servers
    - name: Stop Servers
      if: always()
      run: |
        if [ -f frontend/server.pid ]; then
          kill $(cat frontend/server.pid)
        fi
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid)
        fi
  
  code-coverage:
    name: Code Coverage
    needs: e2e-tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    
    - name: Combine Coverage Reports
      run: |
        # Install required tools
        npm install -g codecov
        
        # Create combined coverage directory
        mkdir -p coverage/combined
        
        # Combine coverage reports from different services
        # This assumes you have nyc (Istanbul) for coverage
        npx nyc merge frontend/coverage frontend-coverage.json
        npx nyc merge backend/coverage backend-coverage.json
        
        # Generate combined report
        npx nyc report --reporter=lcov --reporter=text-summary \
          --temp-dir=frontend/coverage --temp-dir=backend/coverage \
          --report-dir=coverage/combined
        
        # Upload to codecov
        bash <(curl -s https://codecov.io/bash) -f "coverage/combined/lcov.info"
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage/combined/lcov.info
          coverage/combined/clover.xml
        retention-days: 7